//////////////////////PROYECTO FINAL - SISTEMAS EMBEBIDOS///////////////////////
/////////////////////CUAICAL ADONIS - FLORES ALCUCER ERICK /////////////////////
////////////Código del programa general en Arduino//////////////////////////////

#import "datos.h"
#import "datos_clasificados.h"
#include <avr/power.h>
#include <avr/sleep.h>
#include <MsTimer2.h>
int tiempos = 0;
int dtPrueba[2][2];
int val1;
int val2;
int tiempom = 0;
int conti = 0;
int cont = 0;
int cont1 = 0;
int etiqueta = 1;
boolean t = true;
boolean x = true;
int auxmax = 0; // para columna 1
int auxmax1 = 0; // para columna 2
int auxmin1 = 2000;
int auxmin = 2000;
#include <ListLib.h>
List <int> list;

void setup() {
  Serial.begin(9600);
  pinMode(7, INPUT);
  MsTimer2::set(10, reloj);
  MsTimer2::start();

}

void loop() {
  if(digitalRead(7)==LOW){
    recogerDatos();
    }
  
  

  //if(analogRead(0)!=0 && analogRead(1)!=0){
  // algoritmoKnn(3);// tomar en cuenta que si el numero de vecinos es par puede existir empate ..
  //delay(20000);
  //Bayes(0.27);
  //delay(200);
  //delay(20000);
  //matrizConfusion();
  //delay(20000);
  //}
  // cont = 0;

}
void maxmin() {

  for (int i = 0; i < 200; i++) {
    if (lectura[i][0] > auxmax) {
      auxmax = lectura[i][0];
    } else {
      auxmax = auxmax;
    }
    if (lectura[i][1] > auxmax1) {
      auxmax1 = lectura[i][1];

    } else {
      auxmax1 = auxmax1;
    }
    if (lectura[i][0] < auxmin) {
      auxmin = lectura[i][0];
    } else {
      auxmin = auxmin;
    }
    if (lectura[i + 1][1] < auxmin1) {
      auxmin1 = lectura[i][1];
    } else {
      auxmin1 = auxmin1;
    }

  }
  /*Serial.println(auxmax);
    Serial.println(auxmax1);
    Serial.println(auxmin);
    Serial.println(auxmin1);
  */

}
void normalizarDatos() {
  maxmin();
  for (int i = 0; i < 200; i++) {
    lectura[i][0] = (lectura[i][0] - auxmin) / (auxmax - auxmin);
    lectura[i][1] = (lectura[i][1] - auxmin1) / (auxmax1 - auxmin1);
    //Serial.println(String(lectura[i][0])+String("-")+String(lectura[i][1]));
  }
  for (int i = 0; i < 30; i++) {
    dtPrueba[i][0] = (dtPrueba[i][0] - auxmin) / (auxmax -  auxmin);
    dtPrueba[i][1] = (dtPrueba[i][1] - auxmin1) / (auxmax1 - auxmin1);
    //Serial.println(String(lectura[i][0])+String("-")+String(lectura[i][1]));
  }

}
void algoritmoKnn(int num) {
  double auxl;
  double auxil;

  double dist[200][2];
  double distancia;
  //normalizarDatos();
  for (int j = 0; j < 2; j++) {
    for (int i = 0; i < 200; i++) {
      distancia = sqrt(pow(dtPrueba[j][0] - lectura[i][0], 2) + pow(dtPrueba[j][1] - lectura[i][1], 2));
      dist[i][0] = i;
      dist[i][1] = distancia;

    }
    for (int p = 0; p < 200; p++) {
      for (int t = 0; t < 200 - 1 ; t++) {
        if (dist[t][1] > dist[t + 1][1]) {
          auxl = dist[t][1];
          dist[t][1] = dist[t + 1][1];
          dist[t + 1][1] = auxl;
          // posición
          auxil = dist[t][0];
          dist[t][0] = dist[t + 1][0];
          dist[t + 1][0] = auxil;
          //Serial.println(dist[t][0]);
        }
        //Serial.println(auxl);

      }
      // Serial.println(minimo);

    }
    int cont = 0;
    int cont1 = 0;
    for (int n = 0; n < num; n++) {
      if (lectura[int(dist[0][n])][2] == 1) {
        cont++;
      } else if (lectura[int(dist[0][n])][2] == 2) {
        cont1++;

      }
    }
    //Serial.println(String(cont) + String(cont1));
    //delay(500);
    if (cont > cont1) {
      //Serial.print( String( String(dtPrueba[j][0]) + String(",") + String(dtPrueba[j][1]) + String(",") + String(1)) );
      Serial.write(dtPrueba[j][0]);
      delay(100);
      Serial.write(dtPrueba[j][1]);
      delay(100);
      Serial.write(1);
      delay(100);
      cont = 0;
      cont1 = 0;
    }
    if (cont1 > cont) {

      //Serial.print( String( String(dtPrueba[j][0]) + String(",") + String(dtPrueba[j][1]) + String(",") + String(2)) );
      Serial.write(dtPrueba[j][0]);
      delay(100);
      Serial.write(dtPrueba[j][1]);
      delay(100);
      Serial.write(2);
      delay(100);
      cont = 0;
      cont1 = 0;
    }

    //delay(200);

  }

}
void Bayes(double r) {
  double dist[200][2];
  double distancia;
  double numDatos1 = 0;
  double numDatos2 = 0;
  double prob1;
  double prob2;
  double distMayor = 0;

  int eti1 = 0;
  int eti2 = 0;
  double p_x = 0;
  for (int i = 0; i < 200; i++) {
    if (lectura[i][2] == 1) {
      numDatos1++;
    } if (lectura[i][2] == 2) {
      numDatos2++;
    }
  }
  //Serial.println(String(numDatos1)+String(",")+String(numDatos2));
  for (int j = 0; j < 2; j++) {
    for (int i = 0; i < 200; i++) {
      distancia = sqrt(pow(dtPrueba[j][0] - lectura[i][0], 2) + pow(dtPrueba[j][1] - lectura[i][1], 2));
      dist[i][0] = i;
      dist[i][1] = distancia;
    }
    // busco distancia mayor
    for (int n = 0; n < 200; n++) {
      if (dist[n][1] > distMayor) {
        distMayor = dist[n][1];
      }
    }//Normalizar distancias de la matriz
    for (int m = 0; m < 200; m++) {
      dist[m][1] = dist[m][1] / distMayor;
      if (dist[m][1] < r) {
        list.Add(m);
      }
    }
    for (int g = 0; g < list.Count(); g++) {
      if (lectura[list[g]][2] == 1) {
        eti1++;
      } else if (lectura[list[g]][2] == 2) {
        eti2++;
      }

    }
    p_x = double(list.Count()) / double(200);
    //Serial.println(eti2);
    prob1 = ((numDatos1 / 200) * (eti1 / numDatos1)) / p_x;
    prob2 = ((numDatos2 / 200) * (eti2 / numDatos2)) / p_x;
    // Serial.println(double(numDatos1/200));
    if (prob1 > prob2) {
      //Serial.print( String(String(dtPrueba[j][0]) + String(",") + String(dtPrueba[j][1]) + String(",") + String(1)));
      Serial.write(dtPrueba[j][0]);
      delay(100);
      Serial.write(dtPrueba[j][1]);
      delay(100);
      Serial.write(1);
      delay(100);
    }
    else if (prob2 > prob1) {
      //Serial.print(  String(String(dtPrueba[j][0]) + String(",") + String(dtPrueba[j][1]) + String(",") + String(2) ));
      Serial.write(dtPrueba[j][0]);
      delay(100);
      Serial.write(dtPrueba[j][1]);
      delay(100);
      Serial.write(2);
      delay(100);
    }else{
      Serial.write(dtPrueba[j][0]);
      delay(100);
      Serial.write(dtPrueba[j][1]);
      delay(100);
      Serial.write(0);
      delay(100);
      
      }
    //delay(200);
    list.Clear();
    eti1 = 0;
    eti2 = 0;
    prob1 = 0;
    prob2 = 0;
  }
  // delay(20000);
}
void matrizConfusion() {
  int vp = 0;
  int fn = 0;
  int fp = 0;
  int vn = 0;
  for (int i = 0; i < 70; i++) {
    if (dtPrueba[i][2] == dtClasificadosKnn[i][2] == 1) {
      vp++;
    }
    if (dtPrueba[i][2] != dtClasificadosKnn[i][2] == 1) {
      fn++;
    }
    if (dtPrueba[i][2] == dtClasificadosKnn[i][2] == 2) {
      vn++;
    }
    if (dtPrueba[i][2] != dtClasificadosKnn[i][2] == 2) {
      fp++;
    }

  }
  Serial.println("Algoritmo Knn");
  Serial.println(String(" vp = ") + String(vp) + String(" fn = ") + String(fn) + String(" vn = ") + String(vn) + String(" fp = ") + String(fp));
  vp = 0; fn = 0; fp = 0; vn = 0;
  for (int i = 0; i < 70; i++) {
    if (dtPrueba[i][2] == dtClasificadosBayes[i][2] == 1) {
      vp++;
    }
    if (dtPrueba[i][2] != dtClasificadosBayes[i][2] == 1) {
      fn++;
    }
    if (dtPrueba[i][2] == dtClasificadosBayes[i][2] == 2) {
      vn++;
    }
    if (dtPrueba[i][2] != dtClasificadosBayes[i][2] == 2) {
      fp++;
    }

  }
  Serial.println("Algoritmo Bayesiano");
  Serial.println(String(" vp = ") + String(vp) + String(" fn = ") + String(fn) + String(" vn = ") + String(vn) + String(" fp = ") + String(fp));
  vp = 0; fn = 0; fp = 0; vn = 0;
}
void modoSleep() {
  //Serial.println("Estoy Inactivo..");
  set_sleep_mode(SLEEP_MODE_IDLE);
  sleep_enable();
  power_adc_disable();
  power_timer0_disable();
  power_timer1_disable();
  power_twi_disable();
  sleep_mode();
}
void despertar() {
  //Serial.println("he despertado..");
  sleep_disable();
  power_all_enable();
}
void recogerDatos() {
  if (tiempom == 1 && t == true ) {
    despertar();
    if (cont < 2 ) {
      val1 = analogRead(0);
      val2 = analogRead(1);
      dtPrueba[cont][0] = val1;
      dtPrueba[cont][1] = val2;
      cont++;

    } else {
      Bayes(0.27);
      delay(100);
      algoritmoKnn(3);
      delay(100);
      modoSleep();
      t = false;
      cont = 0;


    }
  } else {
    modoSleep();
  }

}
void reloj() {
  if (tiempos < 59) {
    tiempos++;

  } else if (tiempom < 1) {
    tiempos = 0;
    //Serial.println(tiempom);
    tiempom++;
    if (tiempom == 1) {
      t = true;
    }
  } else {
    tiempos = 0;
    tiempom = 0;
  }
}





////////////////Código de filtros/////////////////
////////////////Filtro Sensor 1/////////////////////


#define tamdatos 100
#define tamfiltro 29


extern double datosentrada[tamdatos];
extern double datosfiltro[tamfiltro];
double salida[tamdatos+tamfiltro];
double valores_salida[tamdatos];
void convolution(double *sig_in,double *sig_out,double *imp, int sig_tam, int imp_tam);
void moving_average (double *sig_in, double *valores_salida, int sig_tam, int filter);
void dibujar(void);
void setup() {
  Serial.begin(9600);
}
void loop() {
  convolution((double *)&datosentrada[0], (double *)&salida[0], (double *)&datosfiltro[0], 
                (int) tamdatos, (int) tamfiltro);
  moving_average ((double *)&datosentrada[0], (double *)&valores_salida[0], (int) tamdatos,41);
  dibujar();
  delay(100);
}

//////////////////////////////////FILTROS FIR////////////////////////////////
void convolution(double *sig_in,double *sig_out,double *imp, int sig_tam, int imp_tam){
int i,j;
//poner ceros a vector de salida
for(i=0;i<(sig_tam+imp_tam);i++){
    sig_out[i]=0;
  }
  for(i=0;i<sig_tam;i++){
    for(j=0;j<imp_tam;j++){
      sig_out[i+j]=sig_out[i+j]+sig_in[i]*imp[j];
      }
    }  
}


///////////////////////////SUAVIZADO DE LA SEÑAL/////////////////////////////////////////
void moving_average (double *sig_in, double *valores_salida, int sig_tam, int filter){
  int i,j;

  for(i=floor(filter/2);i<sig_tam-floor(filter/2)-1;i++){
      valores_salida[i]=0;
      for(j=-floor(filter/2);j<floor(filter/2);j++){
          valores_salida[i]=valores_salida[i]+sig_in[i+j];
        }
      valores_salida[i]=valores_salida[i]/filter;
    }
    
}

void dibujar(void){
  int i;
  for(i=0;i<tamdatos;i++){
    Serial.print(datosentrada[i]+10);   
    Serial.print(",");
    Serial.print(valores_salida[i]+5);   
    Serial.print(",");
    Serial.println(salida[i]);          
    delay(5);
    }
}



////////////////Filtro Sensor 2/////////////////////


#define tamdatos 100
#define tamfiltro 29


extern double datosentrada[tamdatos];
extern double datosfiltro[tamfiltro];
double salida[tamdatos+tamfiltro];
double valores_salida[tamdatos];
void convolution(double *sig_in,double *sig_out,double *imp, int sig_tam, int imp_tam);
void moving_average (double *sig_in, double *valores_salida, int sig_tam, int filter);
void dibujar(void);
void setup() {
  Serial.begin(9600);
}
void loop() {
  convolution((double *)&datosentrada[0], (double *)&salida[0], (double *)&datosfiltro[0], 
                (int) tamdatos, (int) tamfiltro);
  moving_average ((double *)&datosentrada[0], (double *)&valores_salida[0], (int) tamdatos,51);
  dibujar();
  delay(100);
}

//////////////////////////////////FILTROS FIR////////////////////////////////
void convolution(double *sig_in,double *sig_out,double *imp, int sig_tam, int imp_tam){
int i,j;
//poner ceros a vector de salida
for(i=0;i<(sig_tam+imp_tam);i++){
    sig_out[i]=0;
  }
  for(i=0;i<sig_tam;i++){
    for(j=0;j<imp_tam;j++){
      sig_out[i+j]=sig_out[i+j]+sig_in[i]*imp[j];
      }
    }  
}


///////////////////////////SUAVIZADO DE LA SEÑAL/////////////////////////////////////////
void moving_average (double *sig_in, double *valores_salida, int sig_tam, int filter){
  int i,j;

  for(i=floor(filter/2);i<sig_tam-floor(filter/2)-1;i++){
      valores_salida[i]=0;
      for(j=-floor(filter/2);j<floor(filter/2);j++){
          valores_salida[i]=valores_salida[i]+sig_in[i+j];
        }
      valores_salida[i]=valores_salida[i]/filter;
    }
    
}

void dibujar(void){
  int i;
  for(i=0;i<tamdatos;i++){
    Serial.print(datosentrada[i]+10);   
    Serial.print(",");
    Serial.print(valores_salida[i]+5);   
    Serial.print(",");
    Serial.println(salida[i]);          
    delay(5);
    }
}


/////////////////////////Código Processing////////////////77

import processing.serial.*; 
int r=0; 
int g=0; 
int matriz[][] = {
  {89, 125, 1}, {88, 126, 1}, {88, 126, 1}, {88, 126, 1}, 
  {88, 126, 1}, {88, 126, 1}, {89, 126, 1}, {89, 126, 1}, 
  {89, 126, 1}, {88, 126, 1}, {89, 126, 1}, {89, 126, 1}, 
  {90, 127, 1}, {90, 127, 1}, {90, 127, 1}, {91, 127, 1}, 
  {87, 124, 1}, {87, 124, 1}, {90, 127, 1}, {76, 113, 1}, 
  {77, 113, 1}, {79, 114, 1}, {77, 111, 1}, {76, 113, 1}, 
  {77, 113, 1}, {77, 113, 1}, {77, 113, 1}, {77, 113, 1}, 
  {77, 112, 1}, {87, 124, 1}, {108, 144, 1}, {108, 144, 1}, 
  {109, 145, 1}, {106, 144, 1}, {108, 144, 1}, {108, 313, 1}, 
  {99, 136, 1}, {100, 136, 1}, {100, 136, 1}, {108, 144, 1}, 
  {76, 113, 1}, {74, 113, 1}, {76, 113, 1}, {76, 113, 1}, 
  {74, 113, 1}, {79, 113, 1}, {76, 114, 1}, {77, 114, 1}, 
  {76, 113, 1}, {76, 113, 1}, {76, 113, 1}, {108, 313, 1}, 
  {108, 312, 1}, {108, 312, 1}, {108, 312, 1}, {108, 312, 1}, 
  {110, 313, 1}, {108, 312, 1}, {97, 312, 1}, {108, 312, 1}, 
  {108, 312, 1}, {115, 294, 1}, {109, 295, 1}, {109, 294, 1}, 
  {109, 294, 1}, {109, 293, 1}, {109, 293, 1}, {109, 294, 1}, 
  {109, 294, 1}, {109, 294, 1}, {108, 293, 1}, {109, 294, 1}, 
  {108, 294, 1}, {109, 293, 1}, {109, 294, 1}, {109, 294, 1}, 
  {107, 294, 1}, {108, 294, 1}, {109, 294, 1}, {109, 294, 1}, 
  {109, 293, 1}, {109, 277, 1}, {108, 277, 1}, {109, 277, 1}, 
  {109, 277, 1}, {110, 277, 1}, {110, 277, 1}, {109, 275, 1}, 
  {109, 277, 1}, {109, 277, 1}, {108, 276, 1}, {109, 276, 1}, 
  {109, 286, 1}, {109, 279, 1}, {109, 275, 1}, {109, 277, 1}, 
  {109, 277, 1}, {109, 280, 1}, {108, 276, 1}, {109, 276, 1}, 
  {109, 276, 1}, {108, 237, 2}, {108, 238, 2}, {108, 238, 2}, 
  {108, 238, 2}, {108, 238, 2}, {108, 238, 2}, {109, 238, 2}, 
  {108, 238, 2}, {108, 238, 2}, {108, 238, 2}, {108, 234, 2}, 
  {107, 234, 2}, {138, 169, 2}, {161, 195, 2}, {188, 227, 2}, 
  {188, 228, 2}, {188, 227, 2}, {188, 227, 2}, {188, 227, 2}, 
  {188, 227, 2}, {188, 227, 2}, {188, 227, 2}, {188, 227, 2}, 
  {189, 228, 2}, {188, 228, 2}, {189, 228, 2}, {188, 228, 2}, 
  {189, 228, 2}, {189, 227, 2}, {189, 227, 2}, {188, 227, 2}, 
  {189, 228, 2}, {178, 217, 2}, {178, 217, 2}, {177, 217, 2}, 
  {178, 217, 2}, {178, 216, 2}, {115, 154, 2}, {115, 154, 2}, 
  {115, 154, 2}, {115, 154, 2}, {115, 154, 2}, {116, 154, 2}, 
  {115, 154, 2}, {115, 154, 2}, {115, 154, 2}, {115, 154, 2}, 
  {115, 153, 2}, {115, 154, 2}, {115, 154, 2}, {115, 154, 2}, 
  {115, 154, 2}, {108, 234, 2}, {108, 234, 2}, {107, 235, 2}, 
  {109, 234, 2}, {105, 233, 2}, {108, 234, 2}, {109, 234, 2}, 
  {108, 234, 2}, {108, 234, 2}, {108, 238, 2}, {108, 234, 2}, 
  {108, 238, 2}, {108, 234, 2}, {108, 233, 2}, {108, 234, 2}, 
  {108, 233, 2}, {110, 234, 2}, {108, 234, 2}, {108, 213, 2}, 
  {108, 213, 2}, {108, 213, 2}, {107, 213, 2}, {108, 213, 2}, 
  {108, 209, 2}, {154, 195, 2}, {115, 154, 2}, {115, 155, 2}, 
  {115, 155, 2}, {115, 155, 2}, {115, 155, 2}, {115, 155, 2}, 
  {115, 154, 2}, {115, 154, 2}, {115, 154, 2}, {108, 213, 2}, 
  {112, 213, 2}, {108, 214, 2}, {108, 214, 2}, {108, 213, 2}, 
  {108, 209, 2}, {108, 214, 2}, {108, 209, 2}, {109, 214, 2}, 
  {107, 213, 2}, {108, 214, 2}, {108, 214, 2}, {108, 213, 2}, 

};
float dtClasificadosBayes[][] = {
  {108.00, 312.00, 1}, {108.00, 213.00, 2}, 
  {109.00, 295.00, 1}, {109.00, 294.00, 1}, 
  {109.00, 294.00, 1}, {108.00, 213.00, 2}, 
  {109.00, 293.00, 1}, {166.00, 205.00, 2}, 
  {162.00, 201.00, 2}, {160.00, 200.00, 2}, 
  {159.00, 199.00, 2}, {157.00, 197.00, 2}, 
  {157.00, 197.00, 2}, {157.00, 197.00, 2}, 
  {157.00, 197.00, 2}, {160.00, 200.00, 2}, 
  {159.00, 199.00, 2}, {108.00, 214.00, 2}, 
  {109.00, 294.00, 1}, {111.00, 257.00, 2}, 
  {111.00, 257.00, 2}, {111.00, 257.00, 2}, 
  {115.00, 250.00, 2}, {108.00, 249.00, 2}, 
  {109.00, 294.00, 1}, {108.00, 293.00, 1}, 
  {108.00, 213.00, 2}, {109.00, 294.00, 1}, 
  {109.00, 293.00, 1}, {109.00, 294.00, 1}, 
  {97.00, 312.00, 1}, {108.00, 312.00, 1}, 
  {108.00, 312.00, 1}, {109.00, 293.00, 1}, 
  {109.00, 294.00, 1}, {110.00, 234.00, 2}, 
  {108.00, 234.00, 2}, {108.00, 294.00, 1}, 
  {108.00, 213.00, 2}, {108.00, 213.00, 2}, 
  {107.00, 213.00, 2}, {108.00, 209.00, 2}, 
  {108.00, 213.00, 2}, {115.00, 294.00, 1}, 
  {112.00, 213.00, 2}, {115.00, 294.00, 1}, 
  {109.00, 295.00, 1}, {109.00, 294.00, 1}, 
  {109.00, 294.00, 1}, {109.00, 293.00, 1}, 
  {108.00, 214.00, 2}, {108.00, 214.00, 2}, 
  {109.00, 294.00, 1}, {109.00, 293.00, 1}, 
  {112.00, 249.00, 2}, {108.00, 250.00, 2}, 
  {108.00, 250.00, 2}, {108.00, 249.00, 2}, 
  {107.00, 250.00, 2}, {108.00, 209.00, 2}, 
  {76.00, 112.00, 1}, {77.00, 112.00, 1}, 
  {77.00, 113.00, 1}, {77.00, 114.00, 1}, 
  {77.00, 113.00, 1}, {77.00, 113.00, 1}, 
  {77.00, 113.00, 1}, {77.00, 113.00, 1}, 
  {77.00, 113.00, 1}, {77.00, 113.00, 1}, 

};
float dtClasificadosKnn[][] = {
  {108.00, 312.00, 1}, {108.00, 213.00, 2}, 
  {109.00, 295.00, 1}, {109.00, 294.00, 1}, 
  {109.00, 294.00, 1}, {108.00, 213.00, 2}, 
  {109.00, 293.00, 1}, {166.00, 205.00, 2}, 
  {162.00, 201.00, 2}, {160.00, 200.00, 2}, 
  {159.00, 199.00, 2}, {157.00, 197.00, 2}, 
  {157.00, 197.00, 2}, {157.00, 197.00, 2}, 
  {157.00, 197.00, 2}, {160.00, 200.00, 2}, 
  {159.00, 199.00, 2}, {108.00, 214.00, 2}, 
  {109.00, 294.00, 1}, {111.00, 257.00, 1}, 
  {111.00, 257.00, 1}, {111.00, 257.00, 1}, 
  {115.00, 250.00, 2}, {108.00, 249.00, 2}, 
  {109.00, 294.00, 1}, {108.00, 293.00, 1}, 
  {108.00, 213.00, 2}, {109.00, 294.00, 1}, 
  {109.00, 293.00, 1}, {109.00, 294.00, 1}, 
  {97.00, 312.00, 1}, {108.00, 312.00, 1}, 
  {108.00, 312.00, 1}, {109.00, 293.00, 1}, 
  {109.00, 294.00, 1}, {110.00, 234.00, 2}, 
  {108.00, 234.00, 2}, {108.00, 294.00, 1}, 
  {108.00, 213.00, 2}, {108.00, 213.00, 2}, 
  {107.00, 213.00, 2}, {108.00, 209.00, 2}, 
  {108.00, 213.00, 2}, {115.00, 294.00, 1}, 
  {112.00, 213.00, 2}, {115.00, 294.00, 1}, 
  {109.00, 295.00, 1}, {109.00, 294.00, 1}, 
  {109.00, 294.00, 1}, {109.00, 293.00, 1}, 
  {108.00, 214.00, 2}, {108.00, 214.00, 2}, 
  {109.00, 294.00, 1}, {109.00, 293.00, 1}, 
  {112.00, 249.00, 2}, {108.00, 250.00, 2}, 
  {108.00, 250.00, 2}, {108.00, 249.00, 2}, 
  {107.00, 250.00, 2}, {108.00, 209.00, 2}, 
  {76.00, 112.00, 1}, {77.00, 112.00, 1}, 
  {77.00, 113.00, 1}, {77.00, 114.00, 1}, 
  {77.00, 113.00, 1}, {77.00, 113.00, 1}, 
  {77.00, 113.00, 1}, {77.00, 113.00, 1}, 
  {77.00, 113.00, 1}, {77.00, 113.00, 1}, 

};

float dato1; 
float dato2; 
float dato;
int aux=0;
int aux1=0;
float vect[][]=new float[4][3];
Serial port; 


void setup() {
  size(1200, 700);
  background(#FCEDED);  
  textSize(32);
  fill(0, 102, 153);  // Set fill to black
  textLeading(40);  // Set leading to 10
  text("Cuaical Adonis-Flores Alcucer Erick-Proyecto Final  ", 200, 35);
  textSize(15);
  fill(0);  // Set fill to black
  textLeading(40);  // Set leading to 10
  text(" Datos de Entrenamiento  ", 95, 75);
  fill(0);  // Set fill to black
  textLeading(40);  // Set leading to 10
  text(" Clasificación datos de prueba con Bayes ", 60+width/3, 75);
  fill(0);  // Set fill to black
  textLeading(40);  // Set leading to 10
  text(" Clasificación datos de con Bayes ", 250, height-25);
  text(" Clasificación datos de con Knn ", width/2 +200, height-25);
  text(" Clasificación datos de prueba con Knn ", 60+2*width/3, 75);
  //println(Serial.list());
  String portName = Serial.list()[0];
  port=new Serial(this, portName, 9600);
  plano(); 
  dibujopts();
}
void draw() {
  aux1=0;
  while (aux1<4) {
    if (aux==0 && port.available()>0) {
      dato=port.read();
      vect[aux1][0]=dato;
      println("Sensor1");
      println(vect[aux1][0]);
      aux++;
    } else if (aux==1 && port.available()>0) {
      dato1=port.read();
      vect[aux1][1]=dato1;
      println("Sensor2");
      println(vect[aux1][1]);
      aux++;
    } else if (aux==2 && port.available()>0) {
      dato2=port.read();
      vect[aux1][2]=dato2;
      println("Etiqueta");
      println(vect[aux1][2]);
  
      aux=0;
      aux1++;
    }
    println(aux1);

  }
    //aux1=0;
    dibujardatosEntrada();
   
 

  
}

void plano() {
  int cont=25; 
  int conti=25; 
  textSize(10);
  fill(255, 0, 0);  // Set fill to black
  textLeading(50);  // Set leading to 10
  text(" CO ", 20, 85);
  text(" NO ", width/3-50, height/2-10);
  text(" CO ", width/3+20, 85);
  text(" NO ", 2*width/3-50, height/2-10);
  text(" CO ", 2*width/3+20, 85);
  text(" NO ", width-50, height/2-10);
  fill(0); 
  strokeWeight(3); 
  line(50, 100, 50, height/2); 
  line(25, height/2-25, width/3-50, height/2-25); 
  line(width/3+50, 100, width/3+50, height/2); 
  line(200, height/2+50, 200, height-50); //////////////////////
  line(width/2+150, height/2+50, width/2+150, height-50); 
  line(125+width/2, height-75, width-150, height-75); 
  line(175, height-75, width/2-100, height-75); 
  line(25+width/3, height/2-25, 2*width/3-50, height/2-25); 
  line(2*width/3+50, 100, 2*width/3+50, height/2); 
  line(25+2*width/3, height/2-25, width-50, height/2-25); 
  triangle(45, 100, 55, 100, 50, 90);
  triangle(195, height/2+50, 205, height/2+50, 200, height/2+40); 
  triangle(145+width/2, height/2+50, 155+width/2, height/2+50, 150+width/2, height/2+40); 
  triangle(45+width/3, 100, 55+width/3, 100, width/3+50, 90); 
  triangle(45+2*width/3, 100, 55+2*width/3, 100, 2*width/3+50, 90);
  triangle(width/3-50, height/2-30, width/3-50, height/2-20, width/3-40, height/2-25); 
  triangle(2*width/3-50, height/2-30, 2*width/3-50, height/2-20, 2*width/3-40, height/2-25); 
  triangle(width-50, height/2-30, width-50, height/2-20, width-40, height/2-25);
  triangle(width/2-100, height-70, width/2-100, height-80, width/2-90, height-75);
  triangle(width-150, height-70, width-150, height-80, width-140, height-75);
  fill(255); 
  rect(50, height/2+50, 90, 75); 
  rect(width/2, height/2+50, 90, 75); 
  line(50, height/2+75, 140, height/2+75); 
  line(50, height/2+100, 140, height/2+100); 
  line(80, height/2+50, 80, height/2+125); 
  line(110, height/2+50, 110, height/2+125); 
  line(width/2, height/2+75, width/2+90, height/2+75); 
  line(width/2, height/2+100, width/2+90, height/2+100); 
  line(width/2+30, height/2+50, width/2+30, height/2+125); 
  line(width/2+60, height/2+50, width/2+60, height/2+125); 
  textSize(10);
  fill(0);  // Set fill to black
  textLeading(50);  // Set leading to 10
  text(" - ", 60, height/2+92);
  text(" - ", width/2+10, height/2+92);
  text(" 32 ", 88, height/2+92);
  text(" 35 ", width/2+36, height/2+92);
  text(" 3 ", 88, height/2+115);
  text(" 0 ", width/2+40, height/2+115);
  text(" 0 ", 116, height/2+92);
  text(" 0 ", width/2+70, height/2+92);
  text(" 35 ", 115, height/2+115);
  text(" 35 ", width/2+65, height/2+115);
  text(" + ", width/2+7, height/2+115);
  text(" + ", 60, height/2+115);
  text("-", 92, height/2+65);
  text("+", 120, height/2+65);
  text("-", width/2+40, height/2+65);
  text("+", width/2+70, height/2+65);
  text("Precición = "+100+"%",50, height/2+150);
  text("Exactitud = "+95.71+"%",50, height/2+175);
  text("Especifidad = "+100+"%",50, height/2+200);
  text("Sensibilidad = "+84.21+"%",50, height/2+225);
  text("Precición = "+100+"%",width/2, height/2+150);
  text("Exactitud = "+100+"%",width/2, height/2+175);
  text("Especifidad = "+100+"%",width/2, height/2+200);
  text("Sensibilidad = "+100+"%",width/2, height/2+225);
  for (int i=0; i<=width/3-100; i+=20) {
    strokeWeight(0.5);
    line(50+i, 100, 50+i, height/2-25); 
    line(50+i+width/3, 100, 50+i+width/3, height/2-25); 
    line(50+i+2*width/3, 100, 50+i+2*width/3, height/2-25);
    line(200+i, height/2+50, 200+i, height-75); 
    line(150+width/2+i, height/2+50, 150+width/2+i, height-75); 
    textSize(8);
    fill(0);  // Set fill to black
    //textLeading(40);  // Set leading to 10
    text(cont, 50+i-5, height/2);
    text(cont, 50+i-5+width/3, height/2); 
    text(cont, 50+i-5+2*width/3, height/2);
    text(cont, 195+i, height-50);
    text(cont, 145+width/2+i, height-50);
    cont+=25;
  }
  for (int i=height/2-25; i>100; i-=20) {

    strokeWeight(0.5);
    line(width/3-46, i, 49, i); 
    line(2*width/3+50, i, width-46, i); 
    line(width/3+50, i, 2*width/3-46, i);
    line(200, i+height/2-50, width/2-95, i+height/2-50); 
    line(150+width/2, i+height/2-50, width-140, i+height/2-50);
    textSize(8);
    fill(0);  // Set fill to black
    //textLeading(40);  // Set leading to 10
    text(conti, 30, i);
    text(conti, width/3+30, i); 
    text(conti, 2*width/3+30, i); 
    text(conti, 180, i+height/2-50); 
    text(conti, width/2+130, i+height/2-50); 
    conti+=16;
  }
}
void dibujopts() {

  for (int i=0; i<200; i++) {
    if (matriz[i][2]==1) {
      g=255; 
      r=0;
    }
    if (matriz[i][2]==2) {
      r=255; 
      g=0;
    }
    fill(r, g, 0); 
    ellipse(map(matriz[i][1], 25, 400, 50, width/3-50), map(matriz[i][0], 25, 200, height/2-25, 100)+3, 5, 5); 
    g=0; 
    r=0; 
    //fill(255, 0, 0);
    //ellipse(map(matriz[i][0], 150, 190, 50, width/2-50)+width/2, map(matriz[i][1], 50, 88, 475, 100)-3, 5, 5);
  }
  g=0; 
  r=0; 
  for (int i=0; i<70; i++) {
    if (dtClasificadosBayes[i][2]==1.0) {
      g=255; 
      r=0;
    }
    if (dtClasificadosBayes[i][2]==2.0) {
      g=0; 
      r=255;
    }
    fill(r, g, 0);
    // print(); 
    ellipse(map(dtClasificadosBayes[i][1], 25, 400, width/3+50, 2*width/3-50), map(dtClasificadosBayes[i][0], 25, 200, height/2-25, 100)+3, 10, 10); 
    r=0; 
    g=0;
  }
  g=0; 
  r=0; 
  for (int i=0; i<70; i++) {
    if (dtClasificadosKnn[i][2]==1) {
      r=0; 
      g=255;
    }
    if (dtClasificadosKnn[i][2]==2) {
      g=0; 
      r=255;
    }
    fill(r, g, 0);
    // print(); 
    ellipse(map(dtClasificadosKnn[i][1], 25, 400, 2*width/3+50, width-50), map(dtClasificadosKnn[i][0], 25, 200, height/2-25, 100)+3, 10, 10); 
    r=0; 
    g=0;
  }
}

void dibujardatosEntrada() {///////////////////////////////////////////////////////////////////////////////////////////////
  int r=0; 
  int g=0; 
  for (int i=0; i<4; i+=2) {
    if (vect[i][2]==1.0) {
      r=0; 
      g=255;
    }
    if (vect[i][2]==2.0) {
      g=0; 
      r=255;
      ///Bayes
    }
    fill(r, g, 0); 
    ellipse(map(vect[i][1], 25, 400, 200, width/2-100), map(vect[i][0], 25, 200, height-75, height/2+50)+3, 5, 5); 
    //fill(255, 0, 0);
    //ellipse(map(matriz[i][0], 150, 190, 50, width/2-50)+width/2, map(matriz[i][1], 50, 88, 475, 100)-3, 5, 5);
  }
  g=0; 
  r=0; 
  //Knn
  for (int i=1; i<4; i+=2) {
     if (vect[int (i)][2]==1.0) {
      r=0; 
      g=255;
    }
    if (vect[i][2]==2.0) {
      g=0; 
      r=255;
    }
    //println(vect[int (i)][1]);
    fill(r, g, 0); 
    ellipse(map(vect[i][1], 25, 400, 155+width/2, width-150), map(vect[i][0], 25, 200, height-75, height/2+50)+3, 5, 5); 
    //fill(255, 0, 0);
    //ellipse(map(matriz[i][0], 150, 190, 50, width/2-50)+width/2, map(matriz[i][1], 50, 88, 475, 100)-3, 5, 5);
  }

  g=0; 
  r=0;
}


